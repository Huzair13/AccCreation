stages:
  - validate
  # - import
  - plan
  - apply

variables:
  TF_ROOT: ${CI_PROJECT_DIR}/envs/global/org-setup

default:
  tags:
    - shell  # Use the specific runner tag here

before_script:
  # Install required tools (if not already available on the runner)
  - command -v jq >/dev/null 2>&1 || { echo >&2 "jq is required but not installed. Aborting."; exit 1; }
  - command -v terraform >/dev/null 2>&1 || { echo >&2 "Terraform is required but not installed. Aborting."; exit 1; }
  - terraform --version
  # Set AWS credentials as environment variables
  - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
  - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  - export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
  # Update or create terraform.tfvars
  - |
    cat <<EOF > ${TF_ROOT}/terraform.tfvars
    account_factory_product_id = "${ACCOUNT_FACTORY_PRODUCT_ID}"
    new_account_email = "${NEW_ACCOUNT_EMAIL}"
    test_email = "${TEST_EMAIL}"
    security_email = "${SECURITY_EMAIL}"
    shared_email = "${SHARED_EMAIL}"
    production_email = "${PRODUCTION_EMAIL}"
    dev_email = "${DEV_EMAIL}"
    ou_factory_product_id = "${OU_FACTORY_PRODUCT_ID}"
    sso_user_email = "${SSO_USER_EMAIL}"
    new_ou_name = "${NEW_OU_NAME}"
    ou_product_id = "${OU_PRODUCT_ID}"
    EOF

# import:
#   stage: import
#   script:
#     - cd ${TF_ROOT}
#     - terraform init -backend-config=backend.tfbackend
#     - |
#       # Function to import a resource if it's not already in the state
#       import_if_not_exists() {
#         local resource=$1
#         local id=$2
#         if ! terraform state list | grep -q "$resource"; then
#           terraform import -var-file=terraform.tfvars "$resource" "$id" || echo "Failed to import $resource, it may not exist yet."
#         else
#           echo "$resource is already in the Terraform state, skipping import."
#         fi
#       }

#       # Import existing resources
#       import_if_not_exists "module.security_account.aws_organizations_account.this" "$(aws organizations list-accounts --query 'Accounts[?Name==`Security`].Id' --output text)"
#       import_if_not_exists "module.lambda_enroll_account.aws_iam_role.lambda_role" "MyEnrollLambda_role"
#       import_if_not_exists "module.org.aws_organizations_organizational_unit.ou[\"Security\"]" "$(aws organizations list-organizational-units-for-parent --parent-id $(aws organizations list-roots --query 'Roots[0].Id' --output text) --query 'OrganizationalUnits[?Name==`Security`].Id' --output text)"
#       import_if_not_exists "module.org.aws_organizations_organizational_unit.ou[\"SharedServices\"]" "$(aws organizations list-organizational-units-for-parent --parent-id $(aws organizations list-roots --query 'Roots[0].Id' --output text) --query 'OrganizationalUnits[?Name==`SharedServices`].Id' --output text)"
#       import_if_not_exists "module.org.aws_organizations_organizational_unit.ou[\"Sandbox\"]" "$(aws organizations list-organizational-units-for-parent --parent-id $(aws organizations list-roots --query 'Roots[0].Id' --output text) --query 'OrganizationalUnits[?Name==`Sandbox`].Id' --output text)"
#       import_if_not_exists "module.org.aws_organizations_organizational_unit.ou[\"TestAccount\"]" "$(aws organizations list-organizational-units-for-parent --parent-id $(aws organizations list-roots --query 'Roots[0].Id' --output text) --query 'OrganizationalUnits[?Name==`TestAccount`].Id' --output text)"
#       import_if_not_exists "module.org.aws_organizations_organizational_unit.ou[\"Production\"]" "$(aws organizations list-organizational-units-for-parent --parent-id $(aws organizations list-roots --query 'Roots[0].Id' --output text) --query 'OrganizationalUnits[?Name==`Production`].Id' --output text)"
#       import_if_not_exists "module.org.aws_organizations_organizational_unit.ou[\"Dev\"]" "$(aws organizations list-organizational-units-for-parent --parent-id $(aws organizations list-roots --query 'Roots[0].Id' --output text) --query 'OrganizationalUnits[?Name==`Dev`].Id' --output text)"
#       import_if_not_exists "module.scp_baseline.aws_organizations_policy.scp" "$(aws organizations list-policies --filter SERVICE_CONTROL_POLICY --query 'Policies[?Name==`BaselineDeny`].Id' --output text)"

validate:
  stage: validate
  script:
    - jq empty account_details.json || (echo "Invalid JSON in account_details.json" && exit 1)
    - cd ${TF_ROOT}
    - terraform init -backend-config=backend.tfbackend
    - terraform validate
  after_script:
    - rm -rf ${TF_ROOT}/.terraform

plan:
  stage: plan
  script:
    - cd ${TF_ROOT}
    - terraform init -backend-config=backend.tfbackend
    - |
      if [ -f "${CI_PROJECT_DIR}/account_details.json" ]; then
        OU_CONFIGS=$(jq -c '.' ${CI_PROJECT_DIR}/account_details.json)
        terraform plan -var-file=terraform.tfvars \
          -var="security_email=${SECURITY_EMAIL}" \
          -var='ou_configs=['"${OU_CONFIGS}"']' \
          -out=tfplan
      else
        echo "account_details.json not found. Please provide account details."
        exit 1
      fi
  artifacts:
    paths:
      - ${TF_ROOT}/tfplan
  after_script:
    - rm -rf ${TF_ROOT}/.terraform

apply:
  stage: apply
  script:
    - cd ${TF_ROOT}
    - terraform init -backend-config=backend.tfbackend
    - terraform apply -auto-approve tfplan
  dependencies:
    - plan
  when: manual
  only:
    changes:
      - account_details.json
  after_script:
    - rm -rf ${TF_ROOT}/.terraform
    - rm -f ${TF_ROOT}/tfplan

after_script:
  - rm -rf ${CI_PROJECT_DIR}/.terraform
  - find ${CI_PROJECT_DIR} -name ".terraform*" -type d -prune -exec rm -rf {} +
